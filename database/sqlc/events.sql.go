// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: events.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    name, 
    description,
    date
) VALUES (
    $1,
    $2,
    $3
)
RETURNING id, name, description, date, created_at
`

type CreateEventParams struct {
	Name        string         `db:"name" json:"name"`
	Description sql.NullString `db:"description" json:"description"`
	Date        time.Time      `db:"date" json:"date"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg *CreateEventParams) (*Events, error) {
	row := q.queryRow(ctx, q.createEventStmt, createEvent, arg.Name, arg.Description, arg.Date)
	var i Events
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteEventStmt, deleteEvent, id)
	return err
}

const getEventByID = `-- name: GetEventByID :one
SELECT id, name, description, date, created_at FROM events
WHERE id = $1
`

func (q *Queries) GetEventByID(ctx context.Context, id int64) (*Events, error) {
	row := q.queryRow(ctx, q.getEventByIDStmt, getEventByID, id)
	var i Events
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
	)
	return &i, err
}

const getEvents = `-- name: GetEvents :many
SELECT id, name, description, date, created_at FROM events ORDER BY created_at DESC
`

func (q *Queries) GetEvents(ctx context.Context) ([]*Events, error) {
	rows, err := q.query(ctx, q.getEventsStmt, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Events{}
	for rows.Next() {
		var i Events
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Date,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastEvent = `-- name: GetLastEvent :one
SELECT id, name, description, date, created_at FROM events
WHERE id = (
    SELECT id FROM events
    ORDER BY created_at DESC
    LIMIT 1
)
`

func (q *Queries) GetLastEvent(ctx context.Context) (*Events, error) {
	row := q.queryRow(ctx, q.getLastEventStmt, getLastEvent)
	var i Events
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
	)
	return &i, err
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET name = $1,
    description = $2,
    date = COALESCE($3, date)
WHERE id = $4
RETURNING id, name, description, date, created_at
`

type UpdateEventParams struct {
	Name        string         `db:"name" json:"name"`
	Description sql.NullString `db:"description" json:"description"`
	Date        time.Time      `db:"date" json:"date"`
	ID          int64          `db:"id" json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg *UpdateEventParams) (*Events, error) {
	row := q.queryRow(ctx, q.updateEventStmt, updateEvent,
		arg.Name,
		arg.Description,
		arg.Date,
		arg.ID,
	)
	var i Events
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Date,
		&i.CreatedAt,
	)
	return &i, err
}
