// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createEventStmt, err = db.PrepareContext(ctx, createEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEvent: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteEventStmt, err = db.PrepareContext(ctx, deleteEvent); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEvent: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUsersByIdAndEventIdStmt, err = db.PrepareContext(ctx, deleteUsersByIdAndEventId); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUsersByIdAndEventId: %w", err)
	}
	if q.getEventByIDStmt, err = db.PrepareContext(ctx, getEventByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventByID: %w", err)
	}
	if q.getEventsStmt, err = db.PrepareContext(ctx, getEvents); err != nil {
		return nil, fmt.Errorf("error preparing query GetEvents: %w", err)
	}
	if q.getLastEventStmt, err = db.PrepareContext(ctx, getLastEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetLastEvent: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUsersByEventIDStmt, err = db.PrepareContext(ctx, getUsersByEventID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsersByEventID: %w", err)
	}
	if q.updateEventStmt, err = db.PrepareContext(ctx, updateEvent); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEvent: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createEventStmt != nil {
		if cerr := q.createEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEventStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteEventStmt != nil {
		if cerr := q.deleteEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEventStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUsersByIdAndEventIdStmt != nil {
		if cerr := q.deleteUsersByIdAndEventIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUsersByIdAndEventIdStmt: %w", cerr)
		}
	}
	if q.getEventByIDStmt != nil {
		if cerr := q.getEventByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventByIDStmt: %w", cerr)
		}
	}
	if q.getEventsStmt != nil {
		if cerr := q.getEventsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventsStmt: %w", cerr)
		}
	}
	if q.getLastEventStmt != nil {
		if cerr := q.getLastEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLastEventStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUsersByEventIDStmt != nil {
		if cerr := q.getUsersByEventIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersByEventIDStmt: %w", cerr)
		}
	}
	if q.updateEventStmt != nil {
		if cerr := q.updateEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEventStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createEventStmt               *sql.Stmt
	createUserStmt                *sql.Stmt
	deleteEventStmt               *sql.Stmt
	deleteUserStmt                *sql.Stmt
	deleteUsersByIdAndEventIdStmt *sql.Stmt
	getEventByIDStmt              *sql.Stmt
	getEventsStmt                 *sql.Stmt
	getLastEventStmt              *sql.Stmt
	getUserByIDStmt               *sql.Stmt
	getUserByUsernameStmt         *sql.Stmt
	getUsersByEventIDStmt         *sql.Stmt
	updateEventStmt               *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createEventStmt:               q.createEventStmt,
		createUserStmt:                q.createUserStmt,
		deleteEventStmt:               q.deleteEventStmt,
		deleteUserStmt:                q.deleteUserStmt,
		deleteUsersByIdAndEventIdStmt: q.deleteUsersByIdAndEventIdStmt,
		getEventByIDStmt:              q.getEventByIDStmt,
		getEventsStmt:                 q.getEventsStmt,
		getLastEventStmt:              q.getLastEventStmt,
		getUserByIDStmt:               q.getUserByIDStmt,
		getUserByUsernameStmt:         q.getUserByUsernameStmt,
		getUsersByEventIDStmt:         q.getUsersByEventIDStmt,
		updateEventStmt:               q.updateEventStmt,
	}
}
