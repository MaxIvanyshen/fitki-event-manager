// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, 
    username,
    tg_id,
    event_id
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, name, username, tg_id, event_id, created_at
`

type CreateUserParams struct {
	Name     string `db:"name" json:"name"`
	Username string `db:"username" json:"username"`
	TgID     int64  `db:"tg_id" json:"tg_id"`
	EventID  int64  `db:"event_id" json:"event_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*Users, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Name,
		arg.Username,
		arg.TgID,
		arg.EventID,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.TgID,
		&i.EventID,
		&i.CreatedAt,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const deleteUsersByIdAndEventId = `-- name: DeleteUsersByIdAndEventId :exec
DELETE FROM users
WHERE id = $1 AND event_id = $2
`

type DeleteUsersByIdAndEventIdParams struct {
	ID      int64 `db:"id" json:"id"`
	EventID int64 `db:"event_id" json:"event_id"`
}

func (q *Queries) DeleteUsersByIdAndEventId(ctx context.Context, arg *DeleteUsersByIdAndEventIdParams) error {
	_, err := q.exec(ctx, q.deleteUsersByIdAndEventIdStmt, deleteUsersByIdAndEventId, arg.ID, arg.EventID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, username, tg_id, event_id, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (*Users, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.TgID,
		&i.EventID,
		&i.CreatedAt,
	)
	return &i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, name, username, tg_id, event_id, created_at FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (*Users, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Username,
		&i.TgID,
		&i.EventID,
		&i.CreatedAt,
	)
	return &i, err
}

const getUsersByEventID = `-- name: GetUsersByEventID :many
SELECT id, name, username, tg_id, event_id, created_at FROM users
WHERE event_id = $1
`

func (q *Queries) GetUsersByEventID(ctx context.Context, eventID int64) ([]*Users, error) {
	rows, err := q.query(ctx, q.getUsersByEventIDStmt, getUsersByEventID, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Username,
			&i.TgID,
			&i.EventID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
